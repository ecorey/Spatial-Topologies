import functions as f
import numpy as np


# b) demonstrating that ld(conv(rd(R))) is the same as ld(rd(conv(R))) for all 11 relationships
def prt2_b_disjoin():
    disjoin = np.array([[0, 0, 1], [0, 0, 1], [1, 1, 1]])

    print("ld(conv(rd(R)))")
    print("For: DISJOIN")
    print(disjoin)
    x = f.rt_dual(disjoin)
    print("-> inside with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> contains with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> DISJOIN with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    disjoin = np.array([[0, 0, 1], [0, 0, 1], [1, 1, 1]])
    print('For: DISJOIN')
    print(disjoin)
    y = f.converse(disjoin)
    print('-> to disjoin with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to inside with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to EMBRACE with a left dual.")
    print(z)
    print("\n")


def prt2_b_embrace():
    embrace = np.array([[1, 1, 1], [1, 0, 0], [1, 0, 0]])

    print("ld(conv(rd(R)))")
    print("For: EMBRACE")
    print(embrace)
    x = f.rt_dual(embrace)
    print("-> to contains with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to inside with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to EMBRACE with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    embrace = np.array([[1, 1, 1], [1, 0, 0], [1, 0, 0]])
    print('For: EMBRACE')
    print(embrace)
    y = f.converse(embrace)
    print('-> to embrace with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to contains with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to DISJOIN with a left dual.")
    print(z)
    print("\n")


def prt2_b_attach():
    attach = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])

    print("ld(conv(rd(R))))")
    print("For: ATTACH")
    print(attach)
    x = f.rt_dual(attach)
    print("-> to equal with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to equal with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to ATTACH with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    attach = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])
    print('For: ATTACH')
    print(attach)
    y = f.converse(attach)
    print('-> to attach with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to equal with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to ATTACH with a left dual.")
    print(z)
    print("\n")


def prt2_b_entwined():
    entwined = np.array([[1, 1, 1], [1, 1, 0], [1, 0, 0]])

    print("ld(conv(rd(R)))")
    print("For: ENTWINED")
    print(entwined)
    x = f.rt_dual(entwined)
    print("-> to covers with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to coveredBy with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to ENTWINED with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    entwined = np.array([[1, 1, 1], [1, 1, 0], [1, 0, 0]])
    print('For: ENTWINED')
    print(entwined)
    y = f.converse(entwined)
    print('-> to entwined with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to covers with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to MEET with a left dual.")
    print(z)
    print("\n")


def prt2_b_meet():
    meet = np.array([[0, 0, 1], [0, 1, 1], [1, 1, 1]])

    print("ld(conv(rd(R)))")
    print("For: MEET")
    print(meet)
    x = f.rt_dual(meet)
    print("-> to coveredBy with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to covers with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to MEET with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    meet = np.array([[0, 0, 1], [0, 1, 1], [1, 1, 1]])
    print('For: MEET')
    print(meet)
    y = f.converse(meet)
    print('-> to meet with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to coveredBy with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to ENTWINED with a left dual.")
    print(z)
    print("\n")


def prt2_b_overlap():
    overlap = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])

    print("ld(conv(rd(R)))")
    print("For: OVERLAP")
    print(overlap)
    x = f.rt_dual(overlap)
    print("-> to overlap with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to overlap with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to OVERLAP with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    overlap = np.array([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    print('For: OVERLAP')
    print(overlap)
    y = f.converse(overlap)
    print('-> to overlap with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to overlap with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to OVERLAP with a left dual.")
    print(z)
    print("\n")


def prt2_b_coveredBy():
    coveredBy = np.array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
    print("ld(conv(rd(R)))")
    print("For: COVEREDBY")
    print(coveredBy)
    x = f.rt_dual(coveredBy)
    print("-> to meet with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to meet with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to COVERS with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    coveredBy = np.array([[1, 0, 0], [1, 1, 0], [1, 1, 1]])
    print('For: COVEREDBY')
    print(coveredBy)
    y = f.converse(coveredBy)
    print('-> to covers with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to entwined with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to COVEREDBY with a left dual.")
    print(z)
    print("\n")


def prt2_b_covers():
    covers = np.array([[1, 1, 1], [0, 1, 1], [0, 0, 1]])
    print("ld(conv(rd(R)))")
    print("For: COVERS")
    print(covers)
    x = f.rt_dual(covers)
    print("-> to entwined with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to entwined with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to COVEREDBY with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    covers = np.array([[1, 1, 1], [0, 1, 1], [0, 0, 1]])
    print('For: COVERS')
    print(covers)
    y = f.converse(covers)
    print('-> to coveredBy with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to meet with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to COVERS with a left dual.")
    print(z)
    print("\n")


def prt2_b_inside():
    inside = np.array([[1, 0, 0], [1, 0, 0], [1, 1, 1]])
    print("ld(conv(rd(R)))")
    print("For: INSIDE")
    print(inside)
    x = f.rt_dual(inside)
    print("-> to disjoin with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to disjoin with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to CONTAINS with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    inside = np.array([[1, 0, 0], [1, 0, 0], [1, 1, 1]])
    print('For: INSIDE')
    print(inside)
    y = f.converse(inside)
    print('-> to contains with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to embrace with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to INSIDE with a left dual.")
    print(z)
    print("\n")


def prt2_b_equals():
    equals = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])

    print("ld(conv(rd(R)))")
    print("For: EQUALS")
    print(equals)
    x = f.rt_dual(equals)
    print("-> to attach with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to attach with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to EQUALS with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    equals = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    print('For: EQUALS')
    print(equals)
    y = f.converse(equals)
    print('-> to equals with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to attach with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to EQUALS with a left dual.")
    print(z)
    print("\n")


def prt2_b_contains():
    contains = np.array([[1, 1, 1], [0, 0, 1], [0, 0, 1]])

    print("ld(conv(rd(R)))")
    print("For: CONTAINS")
    print(contains)
    x = f.rt_dual(contains)
    print("-> to embrace with a right dual.")
    print(x)
    y = f.converse(x)
    print("-> to embrace with the converse.")
    print(x)
    z = f.lft_dual(y)
    print("-> to INSIDE with a left dual.")
    print(z)

    print("ld(rd(conv(R)))")
    contains = np.array([[1, 1, 1], [0, 0, 1], [0, 0, 1]])
    print('For: CONTAINS')
    print(contains)
    y = f.converse(contains)
    print('-> to inside with the converse.')
    print(y)
    y = f.rt_dual(y)
    print('-> to disjoin with a right dual.')
    print(y)
    z = f.lft_dual(y)
    print("-> to CONTAINS with a left dual.")
    print(z)
    print("\n")
